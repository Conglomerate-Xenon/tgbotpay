from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import requests
import asyncio

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "8085507188:AAFbQP91yzQXXiGa8frag59YTtmeyvHNhrg"
TON_ADDRESS = "UQDFx5huuwaQge8xCxkjF4P80ZwvV23zphnCPwYF4XtOYkXs"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –°–ª–æ–≤–∞—Ä–∏
users = {}         # user_id: {"stars": int, "ton_paid": float}
last_balance = 0   # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –±–∞–ª–∞–Ω—Å TON

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = {"stars": 0, "ton_paid": 0}
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –¢—ã –º–æ–∂–µ—à—å –æ–ø–ª–∞—Ç–∏—Ç—å:\n"
                         "- üí∏ –í TON: /pay_ton\n"
                         "- ‚ú® –í –∑–≤—ë–∑–¥–∞—Ö: /pay_stars\n"
                         "- üíº –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å: /stars")

# === –ö–æ–º–∞–Ω–¥–∞ /pay_ton ===
@dp.message_handler(commands=['pay_ton'])
async def pay_ton(message: types.Message):
    await message.answer(f"–û—Ç–ø—Ä–∞–≤—å –æ–ø–ª–∞—Ç—É –≤ TON –Ω–∞ –∞–¥—Ä–µ—Å:\n`{TON_ADDRESS}`\n"
                         f"–Ø –∑–∞—Å—á–∏—Ç–∞—é –æ–ø–ª–∞—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                         parse_mode="Markdown")

# === –ö–æ–º–∞–Ω–¥–∞ /pay_stars ===
@dp.message_handler(commands=['pay_stars'])
async def pay_stars(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = {"stars": 0, "ton_paid": 0}

    if users[user_id]["stars"] >= 10:
        users[user_id]["stars"] -= 10
        await message.answer("‚ú® –û–ø–ª–∞—Ç–∞ –∑–≤—ë–∑–¥–∞–º–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10 ‚ú®")

# === –ö–æ–º–∞–Ω–¥–∞ /stars ===
@dp.message_handler(commands=['stars'])
async def show_stars(message: types.Message):
    user_id = message.from_user.id
    data = users.get(user_id, {"stars": 0, "ton_paid": 0})
    await message.answer(f"üåü –¢–≤–æ–∏ –±–∞–ª–∞–Ω—Å—ã:\n"
                         f"- –ó–≤—ë–∑–¥—ã: {data['stars']} ‚ú®\n"
                         f"- –û–ø–ª–∞—á–µ–Ω–æ TON: {data['ton_paid']} TON")

# === –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ TON ===
async def check_ton_payments():
    global last_balance
    while True:
        try:
            url = f"https://toncenter.com/api/v2/getAddressBalance?address={TON_ADDRESS}"
            response = requests.get(url).json()
            balance = int(response["result"]) / 1e9

            if balance > last_balance:
                delta = round(balance - last_balance, 4)
                last_balance = balance

                # –†–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º (–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∞–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
                for user_id in users:
                    users[user_id]["ton_paid"] += delta
                    await bot.send_message(user_id, f"üí∏ –ü–æ–ª—É—á–µ–Ω–æ {delta} TON. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!")

        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ TON: {e}")

        await asyncio.sleep(10)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@dp.message_handler()
async def fallback(message: types.Message):
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n/pay_ton\n/pay_stars\n/stars")

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(check_ton_payments())
    executor.start_polling(dp, skip_updates=True)

