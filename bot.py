import os
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.webhook import SendMessage
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiohttp import web
import requests
import asyncio

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_ON_RENDER = "RENDER" not in os.environ  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–¥ –Ω–∞ Render
BOT_TOKEN = "8085507188:AAFbQP91yzQXXiGa8frag59YTtmeyvHNhrg"
TON_ADDRESS = "UQDFx5huuwaQge8xCxkjF4P80ZwvV23zphnCPwYF4XtOYkXs"
WEBHOOK_HOST = "https://tgbotpay.onrender.com"  # –í–∞—à URL –Ω–∞ Render
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–ª–æ–≤–∞—Ä–∏
users = {}         # user_id: {"stars": int, "ton_paid": float}
last_balance = 0   # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –±–∞–ª–∞–Ω—Å TON

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = {"stars": 0, "ton_paid": 0}
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –¢—ã –º–æ–∂–µ—à—å –æ–ø–ª–∞—Ç–∏—Ç—å:\n"
                         "- üí∏ 0.45 TON: /pay_ton\n"
                         "- ‚ú® 60 –∑–≤—ë–∑–¥: /pay_stars\n"
                         "- üíº –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å: /stars")

# === –ö–æ–º–∞–Ω–¥–∞ /pay_ton ===
@dp.message_handler(commands=['pay_ton'])
async def pay_ton(message: types.Message):
    await message.answer(f"–û—Ç–ø—Ä–∞–≤—å –æ–ø–ª–∞—Ç—É 0.45 TON –Ω–∞ –∞–¥—Ä–µ—Å:\n`{TON_ADDRESS}`\n"
                         f"–Ø –∑–∞—Å—á–∏—Ç–∞—é –æ–ø–ª–∞—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                         parse_mode="Markdown")

# === –ö–æ–º–∞–Ω–¥–∞ /pay_stars ===
@dp.message_handler(commands=['pay_stars'])
async def pay_stars(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = {"stars": 0, "ton_paid": 0}

    if users[user_id]["stars"] >= 60:
        users[user_id]["stars"] -= 60
        await message.answer("‚ú® –û–ø–ª–∞—Ç–∞ 60 –∑–≤—ë–∑–¥–∞–º–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! –ù—É–∂–Ω–æ 60 ‚ú® (—É –≤–∞—Å {users[user_id]['stars']})")

# === –ö–æ–º–∞–Ω–¥–∞ /stars ===
@dp.message_handler(commands=['stars'])
async def show_stars(message: types.Message):
    user_id = message.from_user.id
    data = users.get(user_id, {"stars": 0, "ton_paid": 0})
    await message.answer(f"üåü –¢–≤–æ–∏ –±–∞–ª–∞–Ω—Å—ã:\n"
                         f"- –ó–≤—ë–∑–¥—ã: {data['stars']} ‚ú®\n"
                         f"- –û–ø–ª–∞—á–µ–Ω–æ TON: {data['ton_paid']} TON")

# === –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ TON ===
async def check_ton_payments():
    global last_balance
    while True:
        try:
            url = f"https://toncenter.com/api/v2/getAddressBalance?address={TON_ADDRESS}"
            response = requests.get(url, timeout=5).json()
            balance = int(response["result"]) / 1e9

            if balance > last_balance:
                delta = round(balance - last_balance, 4)
                last_balance = balance

                for user_id in users:
                    users[user_id]["ton_paid"] += delta
                    try:
                        await bot.send_message(user_id, f"üí∏ –ü–æ–ª—É—á–µ–Ω–æ {delta} TON. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!")
                    except Exception as e:
                        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")

        except Exception as e:
            print(f"[TON CHECK ERROR] {e}")
        await asyncio.sleep(10)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@dp.message_handler()
async def fallback(message: types.Message):
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n/pay_ton\n/pay_stars\n/stars")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ ===
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)
    asyncio.create_task(check_ton_payments())  # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏

async def on_shutdown(app):
    await bot.delete_webhook()

# === –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
if __name__ == "__main__":
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, dp._check_webhook)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    # –ó–∞–ø—É—Å–∫ –Ω–∞ Render (–ø–æ—Ä—Ç –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
    web.run_app(app, host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))

